Enter Training Mode in the simulator.
Start driving the car to get a feel for the controls.
When you are ready, hit the record button in the top right to start recording.
Continue driving for a few laps or till you feel like you have enough data.
Hit the record button in the top right again to stop recording.
-----------------------------------------------------------------
Strategies for Collecting Data
Now that you have driven the simulator and know how to record data, it's time to think about collecting data that will ensure a successful model. There are a few general concepts to think about that we will later discuss in more detail:

the car should stay in the center of the road as much as possible
if the car veers off to the side, it should recover back to center
driving counter-clockwise can help the model generalize
flipping the images is a quick way to augment the data
collecting data from the second track can also help generalize the model
we want to avoid overfitting or underfitting when training the model
knowing when to stop collecting more data
----------------------------------------------------------------------
Set up your development environment with the CarND Starter Kit.
Run the server.
python drive.py model.h5
If you're using Docker for this project: docker run -it --rm -p 4567:4567 -v `pwd`:/src udacity/carnd-term1-starter-kit python drive.py model.h5 or docker run -it --rm -p 4567:4567 -v ${pwd}:/src udacity/carnd-term1-starter-kit python drive.py model.h5. Port 4567 is used by the simulator to communicate.
-----
from keras.models import Sequential, Model
from keras.layers import Lambda

# set up lambda layer
model = Sequential()
model.add(Lambda(lambda x: (x / 255.0) - 0.5, input_shape=(160,320,3)))
...


Loading data...
Training model
Train on 5545 samples, validate on 1387 samples
Epoch 1/4
75s - loss: 0.0034 - val_loss: 0.0021
Epoch 2/4
73s - loss: 0.0015 - val_loss: 0.0020
Epoch 3/4
75s - loss: 0.0013 - val_loss: 0.0022
Epoch 4/4
80s - loss: 0.0012 - val_loss: 0.0022
Saving model...
